// Arquivo js/filtro-fix.js - Corre√ß√£o para o filtro de usu√°rio - VERS√ÉO ATUALIZADA

(function() {
    console.log("üîß Inicializando corre√ß√£o para o filtro de usu√°rio...");
    
    // Fun√ß√£o para garantir que os filtros funcionem corretamente
    function garantirFuncionamentoFiltros() {
        console.log("üîç Verificando funcionamento dos filtros...");
        
        // Verificar se as fun√ß√µes principais existem
        if (typeof window.filtrarPropostas !== 'function') {
            console.error("‚ùå Fun√ß√£o filtrarPropostas n√£o encontrada");
            return false;
        }
        
        if (typeof window.ordenarPropostas !== 'function') {
            console.error("‚ùå Fun√ß√£o ordenarPropostas n√£o encontrada");
            return false;
        }
        
        if (typeof window.aplicarFiltrosEOrdenacao !== 'function') {
            console.warn("‚ö†Ô∏è Fun√ß√£o aplicarFiltrosEOrdenacao n√£o encontrada, criando fallback...");
            
            // Criar fun√ß√£o de fallback
            window.aplicarFiltrosEOrdenacao = function() {
                console.log("üîÑ Executando aplicarFiltrosEOrdenacao (fallback)");
                
                try {
                    const propostasFiltradas = window.filtrarPropostas();
                    const propostasOrdenadas = window.ordenarPropostas(propostasFiltradas);
                    
                    if (typeof window.renderizarTabela === 'function') {
                        window.renderizarTabela(propostasOrdenadas);
                    }
                    
                    if (typeof window.atualizarEstatisticas === 'function') {
                        window.atualizarEstatisticas(propostasFiltradas);
                    }
                    
                    if (typeof window.atualizarOperacoesExcedidas === 'function') {
                        window.atualizarOperacoesExcedidas(propostasFiltradas);
                    }
                    
                    console.log("‚úÖ Filtros aplicados com sucesso (fallback)");
                } catch (error) {
                    console.error("‚ùå Erro ao aplicar filtros (fallback):", error);
                }
            };
        }
        
        return true;
    }
    
    // Fun√ß√£o para corrigir event listeners dos filtros
    function corrigirEventListenersFiltros() {
        console.log("üéõÔ∏è Corrigindo event listeners dos filtros...");
        
        // Filtro de status
        const statusFilter = document.getElementById('status-filter');
        if (statusFilter) {
            // Remover listeners existentes
            const newStatusFilter = statusFilter.cloneNode(true);
            statusFilter.parentNode.replaceChild(newStatusFilter, statusFilter);
            
            // Adicionar novo listener
            newStatusFilter.addEventListener('change', function() {
                console.log(`üîÑ Status filtro alterado para: ${this.value}`);
                if (window.APP_STATE) {
                    window.APP_STATE.filtroStatus = this.value;
                }
                
                if (typeof window.aplicarFiltrosEOrdenacao === 'function') {
                    window.aplicarFiltrosEOrdenacao();
                } else {
                    console.error("Fun√ß√£o aplicarFiltrosEOrdenacao n√£o encontrada");
                }
            });
            
            console.log("‚úÖ Event listener do filtro de status corrigido");
        }
        
        // Filtro de cedente
        const cedenteFilter = document.getElementById('cedente-filter');
        if (cedenteFilter) {
            // Remover listeners existentes
            const newCedenteFilter = cedenteFilter.cloneNode(true);
            cedenteFilter.parentNode.replaceChild(newCedenteFilter, cedenteFilter);
            
            // Adicionar novo listener
            newCedenteFilter.addEventListener('input', function() {
                console.log(`üîÑ Cedente filtro alterado para: "${this.value}"`);
                if (window.APP_STATE) {
                    window.APP_STATE.filtroCedente = this.value;
                }
                
                if (typeof window.aplicarFiltrosEOrdenacao === 'function') {
                    window.aplicarFiltrosEOrdenacao();
                } else {
                    console.error("Fun√ß√£o aplicarFiltrosEOrdenacao n√£o encontrada");
                }
            });
            
            console.log("‚úÖ Event listener do filtro de cedente corrigido");
        }
        
        // Filtro de usu√°rio
        const usuarioFilter = document.getElementById('usuario-filter');
        if (usuarioFilter) {
            // Remover listeners existentes
            const newUsuarioFilter = usuarioFilter.cloneNode(true);
            usuarioFilter.parentNode.replaceChild(newUsuarioFilter, usuarioFilter);
            
            // Adicionar novo listener
            newUsuarioFilter.addEventListener('change', function() {
                console.log(`üîÑ Usu√°rio filtro alterado para: ${this.value}`);
                if (window.APP_STATE) {
                    window.APP_STATE.usuarioSelecionado = this.value;
                }
                
                if (typeof window.aplicarFiltrosEOrdenacao === 'function') {
                    window.aplicarFiltrosEOrdenacao();
                } else {
                    console.error("Fun√ß√£o aplicarFiltrosEOrdenacao n√£o encontrada");
                }
            });
            
            console.log("‚úÖ Event listener do filtro de usu√°rio corrigido");
        }
        
        // Filtro de ordena√ß√£o
        const sortFilter = document.getElementById('sort-by');
        if (sortFilter) {
            // Remover listeners existentes
            const newSortFilter = sortFilter.cloneNode(true);
            sortFilter.parentNode.replaceChild(newSortFilter, sortFilter);
            
            // Adicionar novo listener
            newSortFilter.addEventListener('change', function() {
                console.log(`üîÑ Ordena√ß√£o alterada para: ${this.value}`);
                if (window.APP_STATE) {
                    window.APP_STATE.ordenacao = this.value;
                }
                
                if (typeof window.aplicarFiltrosEOrdenacao === 'function') {
                    window.aplicarFiltrosEOrdenacao();
                } else {
                    console.error("Fun√ß√£o aplicarFiltrosEOrdenacao n√£o encontrada");
                }
            });
            
            console.log("‚úÖ Event listener da ordena√ß√£o corrigido");
        }
    }
    
    // Fun√ß√£o para corrigir ordena√ß√£o por cabe√ßalho
    function corrigirOrdenacaoPorCabecalho() {
        console.log("üìã Corrigindo ordena√ß√£o por cabe√ßalho...");
        
        // Remover todos os event listeners existentes dos cabe√ßalhos
        document.querySelectorAll('.sortable').forEach(header => {
            const newHeader = header.cloneNode(true);
            header.parentNode.replaceChild(newHeader, header);
        });
        
        // Adicionar novos event listeners
        document.querySelectorAll('.sortable').forEach(header => {
            header.addEventListener('click', function() {
                const sortType = this.getAttribute('data-sort');
                console.log(`üìä Clicou no cabe√ßalho para ordenar por: ${sortType}`);
                
                if (!sortType) {
                    console.warn("‚ö†Ô∏è Tipo de ordena√ß√£o n√£o definido para este cabe√ßalho");
                    return;
                }
                
                // Determinar dire√ß√£o da ordena√ß√£o
                let novaOrdenacao = sortType + '_desc';
                
                if (window.APP_STATE && window.APP_STATE.ordenacao === sortType + '_desc') {
                    novaOrdenacao = sortType + '_asc';
                }
                
                // Atualizar estado
                if (window.APP_STATE) {
                    window.APP_STATE.ordenacao = novaOrdenacao;
                }
                
                console.log(`üìä Ordena√ß√£o definida como: ${novaOrdenacao}`);
                
                // Atualizar indicadores visuais
                document.querySelectorAll('.sortable').forEach(h => {
                    h.classList.remove('sort-asc', 'sort-desc');
                });
                
                if (novaOrdenacao.endsWith('_asc')) {
                    this.classList.add('sort-asc');
                } else {
                    this.classList.add('sort-desc');
                }
                
                // Aplicar ordena√ß√£o
                if (typeof window.aplicarFiltrosEOrdenacao === 'function') {
                    window.aplicarFiltrosEOrdenacao();
                } else {
                    console.error("‚ùå Fun√ß√£o aplicarFiltrosEOrdenacao n√£o encontrada");
                }
            });
            
            // Adicionar cursor pointer
            header.style.cursor = 'pointer';
            header.title = `Clique para ordenar por ${header.textContent}`;
        });
        
        console.log("‚úÖ Ordena√ß√£o por cabe√ßalho corrigida");
    }
    
    // Fun√ß√£o principal de inicializa√ß√£o
    function inicializarCorrecaoFiltros() {
        console.log("üöÄ Inicializando corre√ß√£o completa dos filtros...");
        
        // Verificar se as depend√™ncias est√£o dispon√≠veis
        if (!garantirFuncionamentoFiltros()) {
            console.error("‚ùå Depend√™ncias n√£o dispon√≠veis, tentando novamente em 2 segundos...");
            setTimeout(inicializarCorrecaoFiltros, 2000);
            return;
        }
        
        // Corrigir event listeners
        corrigirEventListenersFiltros();
        
        // Corrigir ordena√ß√£o por cabe√ßalho
        corrigirOrdenacaoPorCabecalho();
        
        console.log("‚úÖ Corre√ß√£o dos filtros conclu√≠da com sucesso!");
        
        // Testar se os filtros est√£o funcionando
        setTimeout(() => {
            testarFuncionamentoFiltros();
        }, 1000);
    }
    
    // Fun√ß√£o para testar o funcionamento dos filtros
    function testarFuncionamentoFiltros() {
        console.log("üß™ Testando funcionamento dos filtros...");
        
        try {
            // Testar filtrarPropostas
            const propostasFiltradas = window.filtrarPropostas();
            console.log(`‚úÖ filtrarPropostas funcionando: ${propostasFiltradas.length} propostas filtradas`);
            
            // Testar ordenarPropostas
            const propostasOrdenadas = window.ordenarPropostas(propostasFiltradas);
            console.log(`‚úÖ ordenarPropostas funcionando: ${propostasOrdenadas.length} propostas ordenadas`);
            
            // Testar aplicarFiltrosEOrdenacao
            if (typeof window.aplicarFiltrosEOrdenacao === 'function') {
                console.log("‚úÖ aplicarFiltrosEOrdenacao dispon√≠vel");
            } else {
                console.warn("‚ö†Ô∏è aplicarFiltrosEOrdenacao n√£o dispon√≠vel");
            }
            
            console.log("üéâ Todos os testes de filtros passaram!");
            
        } catch (error) {
            console.error("‚ùå Erro nos testes de filtros:", error);
        }
    }
    
    // Fun√ß√£o para adicionar bot√£o de debug dos filtros
    function adicionarBotaoDebugFiltros() {
        // Verificar se o bot√£o j√° existe
        if (document.getElementById('debug-filtros-btn')) {
            return;
        }
        
        // Criar o bot√£o
        const botao = document.createElement('button');
        botao.id = 'debug-filtros-btn';
        botao.className = 'debug-filtros-button';
        botao.innerHTML = '<i class="fas fa-bug"></i> Debug Filtros';
        botao.title = 'Debug dos filtros e ordena√ß√£o';
        
        // Adicionar estilo ao bot√£o
        botao.style.position = 'fixed';
        botao.style.bottom = '100px';
        botao.style.right = '10px';
        botao.style.padding = '5px 10px';
        botao.style.backgroundColor = '#FF5722';
        botao.style.color = 'white';
        botao.style.border = 'none';
        botao.style.borderRadius = '4px';
        botao.style.cursor = 'pointer';
        botao.style.zIndex = '9999';
        botao.style.fontSize = '12px';
        
        // Adicionar evento de clique
        botao.addEventListener('click', function() {
            console.log("üêõ === DEBUG DOS FILTROS ===");
            
            // Verificar APP_STATE
            console.log("APP_STATE:", window.APP_STATE);
            
            // Verificar filtros atuais
            const statusFiltro = document.getElementById('status-filter')?.value;
            const cedenteFiltro = document.getElementById('cedente-filter')?.value;
            const usuarioFiltro = document.getElementById('usuario-filter')?.value;
            const ordenacao = document.getElementById('sort-by')?.value;
            
            console.log("Filtros atuais:", {
                status: statusFiltro,
                cedente: cedenteFiltro,
                usuario: usuarioFiltro,
                ordenacao: ordenacao
            });
            
            // Verificar fun√ß√µes dispon√≠veis
            console.log("Fun√ß√µes dispon√≠veis:", {
                filtrarPropostas: typeof window.filtrarPropostas,
                ordenarPropostas: typeof window.ordenarPropostas,
                aplicarFiltrosEOrdenacao: typeof window.aplicarFiltrosEOrdenacao,
                renderizarTabela: typeof window.renderizarTabela,
                atualizarEstatisticas: typeof window.atualizarEstatisticas
            });
            
            // Testar filtros
            if (typeof window.filtrarPropostas === 'function') {
                try {
                    const resultado = window.filtrarPropostas();
                    console.log(`Resultado do filtro: ${resultado.length} propostas`);
                } catch (error) {
                    console.error("Erro ao executar filtrarPropostas:", error);
                }
            }
            
            // Verificar event listeners dos cabe√ßalhos
            const cabecalhos = document.querySelectorAll('.sortable');
            console.log(`Cabe√ßalhos orden√°veis encontrados: ${cabecalhos.length}`);
            
            cabecalhos.forEach((cabecalho, index) => {
                const sortType = cabecalho.getAttribute('data-sort');
                console.log(`Cabe√ßalho ${index + 1}: ${cabecalho.textContent.trim()} (data-sort: ${sortType})`);
            });
            
            console.log("üêõ === FIM DEBUG DOS FILTROS ===");
            
            // Mostrar resumo em alert
            alert(`Debug dos Filtros:\n\n` +
                  `‚Ä¢ APP_STATE: ${window.APP_STATE ? 'OK' : 'ERRO'}\n` +
                  `‚Ä¢ filtrarPropostas: ${typeof window.filtrarPropostas}\n` +
                  `‚Ä¢ ordenarPropostas: ${typeof window.ordenarPropostas}\n` +
                  `‚Ä¢ Cabe√ßalhos orden√°veis: ${cabecalhos.length}\n` +
                  `‚Ä¢ Status atual: ${statusFiltro}\n` +
                  `‚Ä¢ Cedente atual: "${cedenteFiltro}"\n` +
                  `‚Ä¢ Usu√°rio atual: ${usuarioFiltro}\n\n` +
                  `Veja mais detalhes no console.`);
        });
        
        // Adicionar o bot√£o ao documento
        document.body.appendChild(botao);
        console.log("üêõ Bot√£o de debug dos filtros adicionado");
    }
    
    // Fun√ß√£o para for√ßar reconfigura√ß√£o dos filtros
    function forcarReconfiguracaoFiltros() {
        console.log("üîÑ For√ßando reconfigura√ß√£o dos filtros...");
        
        // Aguardar um pouco e tentar novamente
        setTimeout(() => {
            inicializarCorrecaoFiltros();
        }, 500);
        
        // Tentar novamente ap√≥s mais tempo se necess√°rio
        setTimeout(() => {
            if (typeof window.configurarOrdenacaoPorCabecalho === 'function') {
                console.log("üîÑ Executando configurarOrdenacaoPorCabecalho...");
                window.configurarOrdenacaoPorCabecalho();
            }
            
            if (typeof window.configurarEventListenersFiltros === 'function') {
                console.log("üîÑ Executando configurarEventListenersFiltros...");
                window.configurarEventListenersFiltros();
            }
        }, 2000);
    }
    
    // Inicializar quando o documento estiver pronto
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', function() {
            console.log("üìÑ DOM carregado, iniciando corre√ß√£o dos filtros...");
            setTimeout(inicializarCorrecaoFiltros, 1000);
            setTimeout(adicionarBotaoDebugFiltros, 2000);
            setTimeout(forcarReconfiguracaoFiltros, 3000);
        });
    } else {
        console.log("üìÑ DOM j√° carregado, iniciando corre√ß√£o dos filtros...");
        setTimeout(inicializarCorrecaoFiltros, 1000);
        setTimeout(adicionarBotaoDebugFiltros, 2000);
        setTimeout(forcarReconfiguracaoFiltros, 3000);
    }
    
    // Expor fun√ß√£o para uso externo
    window.corrigirFiltros = inicializarCorrecaoFiltros;
    window.debugFiltros = testarFuncionamentoFiltros;
    
    console.log("üîß Filtro-fix carregado e configurado");
})();